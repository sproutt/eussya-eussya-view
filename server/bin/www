#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
let fs = require("fs");
var http =
  process.env.NODE_ENV === "production" ? require("http") : require("https");

/**
 * Get port from environment and store in Express.
 */

var port =
  process.env.NODE_ENV === "production"
    ? normalizePort(process.env.PORT || "443")
    : process.env.NODE_ENV === "developent"
    ? normalizePort(process.env.PORT || "8080")
    : normalizePort(process.env.PORT || "80");
app.set("port", port);

const option =
  process.env.NODE_ENV === "production"
    ? {
        key: fs.readFileSync(__dirname + process.env.SSL_KEY),
        cert: fs.readFileSync(__dirname + process.env.CERT),
        ca: fs.readFileSync(__dirname + process.env.CA),
      }
    : undefined;

/**
 * Create HTTP server.
 */

var server =
  process.env.NODE_ENV === "production"
    ? http.createServer(option, app)
    : http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
